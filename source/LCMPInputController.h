//
//  LCMPInputController.h
//  Low Control Mall Patrol
//
//  Author: Kevin Games
//  Version: 2/20/22
//

#ifndef __LCMP_INPUT_CONTROLLER_H__
#define __LCMP_INPUT_CONTROLLER_H__
#include <cugl/cugl.h>

/**
 * The controller that handles all inputs to the device
 */
class InputController {
private:
    /** Whether or not this input is active */
    bool _active;

    /** Force generated by the left arrow key */
    float _forceLeft;
    /** Force generated by the right arrow key */
    float _forceRight;
    /** Force generated by the up arrow key */
    float _forceUp;
    /** Force generated by the down arrow key */
    float _forceDown;
    /** The thrust produced by the keyboard only */
    cugl::Vec2 _keybdThrust;

    // TOUCH SUPPORT

    /** Whether the virtual joystick is active */
    bool _joystick;
    /** The position of the virtual joystick */
    cugl::Vec2 _joycenter;

protected:
    // Input results
    /** The thrust produced by the player input */
    cugl::Vec2 _inputMovement;

    /** Information representing a single "touch" (possibly multi-finger) */
    struct TouchInstance {
        /** The anchor touch position (on start) */
        cugl::Vec2 position;
        /** The current touch time */
        cugl::Timestamp timestamp;
        /** The touch id(s) for future reference */
        std::unordered_set<Uint64> touchids;
    };

    /** The bounds of the entire game screen (in touch coordinates) */
    cugl::Rect _tbounds;
    /** The bounds of the entire game screen (in scene coordinates) */
    cugl::Rect _sbounds;

public:
#pragma mark -
#pragma mark Constructors

    // Each zone can have only one touch
    /** The current touch location for the main zone */
    TouchInstance _mtouch;


    /**
     * Populates the initial values of the TouchInstances
     */
    void clearTouchInstance(TouchInstance& touchInstance);

    /**
     * Returns the scene location of a touch
     *
     * Touch coordinates are inverted, with y origin in the top-left
     * corner. This method corrects for this and scales the screen
     * coordinates down on to the scene graph size.
     *
     * @return the scene location of a touch
     */
    cugl::Vec2 touch2Screen(const cugl::Vec2 pos) const;

    /**
     * Processes movement for the floating joystick.
     *
     * This will register movement as left or right (or neither).  It
     * will also move the joystick anchor if the touch position moves
     * too far.
     *
     * @param  pos  the current joystick position
     */
    void processJoystick(const cugl::Vec2 pos);

    /**
     * Creates a new input controller.
     *
     * This constructor does NOT do any initialzation.  It simply allocates the
     * object. This makes it safe to use this class without a pointer.
     */
    InputController(); // Don't initialize.  Allow stack based

    /**
     * Disposes of this input controller, releasing all listeners.
     */
    ~InputController() { dispose(); }

    /**
     * Deactivates this input controller, releasing all listeners.
     *
     * This method will not dispose of the input controller. It can be reused
     * once it is reinitialized.
     */
    void dispose();

    /**
     * Initializes the input control
     *
     * This method works like a proper constructor, initializing the input
     * controller, allocating memory and attaching listeners.
     *
     * @return true if the controller was initialized successfully
     */
    bool init(const cugl::Rect bounds);

#pragma mark -
#pragma mark Input Detection
    /**
     * Returns true if the input handler is currently active
     *
     * @return true if the input handler is currently active
     */
    bool isActive() const { return _active; }

    /**
     * Processes the currently cached inputs.
     *
     * This method is used to to poll the current input state.  This will poll
     * the keyboad and accelerometer.
     *
     * This method also gathers the delta difference in the touches. Depending
     * on the OS, we may see multiple updates of the same touch in a single
     * animation frame, so we need to accumulate all of the data together.
     */
    void update(float dt);

    /**
     * Clears any buffered inputs so that we may start fresh.
     */
    void clear();
#pragma mark -

#pragma mark Input Results
    /**
     * Returns the current input thrust.
     *
     * The thrust is determined by the last input method.
     *
     * @return The input thrust
     */
    const cugl::Vec2& getMovement() { return _inputMovement; }

    /**
     * Returns true if the virtual joystick is in use (touch only)
     *
     * @return true if the virtual joystick is in use (touch only)
     */
    bool withJoystick() const { return _joystick; }

    /**
     * Returns the scene graph position of the virtual joystick
     *
     * @return the scene graph position of the virtual joystick
     */
    cugl::Vec2 getJoystick() const { return _joycenter; }

#pragma mark -
#pragma mark Touch Callbacks
    /**
     * Callback for the beginning of a touch event
     *
     * @param t     The touch information
     * @param event The associated event
     */
    void touchBeganCB(const cugl::TouchEvent& event, bool focus);

    /**
     * Callback for the end of a touch event
     *
     * @param t     The touch information
     * @param event The associated event
     */
    void touchEndedCB(const cugl::TouchEvent& event, bool focus);

    /**
         * Callback for a mouse release event.
         *
         * @param event The associated event
         * @param previous The previous position of the touch
         * @param focus	Whether the listener currently has focus
         */
    void touchesMovedCB(const cugl::TouchEvent& event, const cugl::Vec2& previous, bool focus);


};

#endif /* __LCMP_INPUT_CONTROLLER_H__ */
